diff --git a/src/core/Browser.js b/src/core/Browser.js
index efff95eb..5cda05d4 100644
--- a/src/core/Browser.js
+++ b/src/core/Browser.js
@@ -21,9 +21,6 @@ var style = document.documentElement.style;
 // @property ie: Boolean; `true` for all Internet Explorer versions (not Edge).
 var ie = 'ActiveXObject' in window;
 
-// @property ielt9: Boolean; `true` for Internet Explorer versions less than 9.
-var ielt9 = ie && !document.addEventListener;
-
 // @property edge: Boolean; `true` for the Edge web browser.
 var edge = 'msLaunchUri' in navigator && !('documentMode' in document);
 
@@ -64,9 +61,6 @@ var opera12 = 'OTransition' in style;
 // @property win: Boolean; `true` when the browser is running in a Windows platform
 var win = navigator.platform.indexOf('Win') === 0;
 
-// @property ie3d: Boolean; `true` for all Internet Explorer versions supporting CSS transforms.
-var ie3d = ie && ('transition' in style);
-
 // @property webkit3d: Boolean; `true` for webkit-based browsers supporting CSS transforms.
 var webkit3d = ('WebKitCSSMatrix' in window) && ('m11' in new window.WebKitCSSMatrix()) && !android23;
 
@@ -152,31 +146,12 @@ var inlineSvg = !!svg && (function () {
 	return (div.firstChild && div.firstChild.namespaceURI) === 'http://www.w3.org/2000/svg';
 })();
 
-// @property vml: Boolean
-// `true` if the browser supports [VML](https://en.wikipedia.org/wiki/Vector_Markup_Language).
-var vml = !svg && (function () {
-	try {
-		var div = document.createElement('div');
-		div.innerHTML = '<v:shape adj="1"/>';
-
-		var shape = div.firstChild;
-		shape.style.behavior = 'url(#default#VML)';
-
-		return shape && (typeof shape.adj === 'object');
-
-	} catch (e) {
-		return false;
-	}
-}());
-
 function userAgentContains(str) {
 	return navigator.userAgent.toLowerCase().indexOf(str) >= 0;
 }
 
 
 export default {
-	ie: ie,
-	ielt9: ielt9,
 	edge: edge,
 	webkit: webkit,
 	android: android,
@@ -189,7 +164,6 @@ export default {
 	phantom: phantom,
 	opera12: opera12,
 	win: win,
-	ie3d: ie3d,
 	webkit3d: webkit3d,
 	gecko3d: gecko3d,
 	any3d: any3d,
@@ -206,6 +180,5 @@ export default {
 	passiveEvents: passiveEvents,
 	canvas: canvas,
 	svg: svg,
-	vml: vml,
 	inlineSvg: inlineSvg
 };
diff --git a/src/dom/DomUtil.js b/src/dom/DomUtil.js
index 8296548d..67e85d5f 100644
--- a/src/dom/DomUtil.js
+++ b/src/dom/DomUtil.js
@@ -214,9 +214,7 @@ export function setTransform(el, offset, scale) {
 	var pos = offset || new Point(0, 0);
 
 	el.style[TRANSFORM] =
-		(Browser.ie3d ?
-			'translate(' + pos.x + 'px,' + pos.y + 'px)' :
-			'translate3d(' + pos.x + 'px,' + pos.y + 'px,0)') +
+		('translate3d(' + pos.x + 'px,' + pos.y + 'px,0)') +
 		(scale ? ' scale(' + scale + ')' : '');
 }
 
diff --git a/src/geo/LatLng.js b/src/geo/LatLng.js
index 9fafca93..a83dad36 100644
--- a/src/geo/LatLng.js
+++ b/src/geo/LatLng.js
@@ -1,5 +1,5 @@
 import * as Util from '../core/Util';
-import {Earth} from './crs/CRS.Earth';
+import {Simple} from './crs/CRS.Simple';
 import {toLatLngBounds} from './LatLngBounds';
 
 /* @class LatLng
@@ -73,13 +73,13 @@ LatLng.prototype = {
 	// @method distanceTo(otherLatLng: LatLng): Number
 	// Returns the distance (in meters) to the given `LatLng` calculated using the [Spherical Law of Cosines](https://en.wikipedia.org/wiki/Spherical_law_of_cosines).
 	distanceTo: function (other) {
-		return Earth.distance(this, toLatLng(other));
+		return Simple.distance(this, toLatLng(other));
 	},
 
 	// @method wrap(): LatLng
 	// Returns a new `LatLng` object with the longitude wrapped so it's always between -180 and +180 degrees.
 	wrap: function () {
-		return Earth.wrapLatLng(this);
+		return Simple.wrapLatLng(this);
 	},
 
 	// @method toBounds(sizeInMeters: Number): LatLngBounds
diff --git a/src/geo/projection/index.js b/src/geo/projection/index.js
index c64664e5..7ecacfad 100644
--- a/src/geo/projection/index.js
+++ b/src/geo/projection/index.js
@@ -22,5 +22,5 @@
  */
 
 export {LonLat} from './Projection.LonLat';
-export {Mercator} from './Projection.Mercator';
-export {SphericalMercator} from './Projection.SphericalMercator';
+//export {Mercator} from './Projection.Mercator';
+//export {SphericalMercator} from './Projection.SphericalMercator';
diff --git a/src/layer/index.js b/src/layer/index.js
index 4b6fda85..ccca846e 100644
--- a/src/layer/index.js
+++ b/src/layer/index.js
@@ -20,5 +20,5 @@ export {Popup, popup} from './Popup';
 export {Tooltip, tooltip} from './Tooltip';
 
 export * from './marker/index';
-export * from './tile/index';
+//export * from './tile/index';
 export * from './vector/index';
diff --git a/src/layer/tile/GridLayer.js b/src/layer/tile/GridLayer.js
index df6f1288..05fe7fe6 100755
--- a/src/layer/tile/GridLayer.js
+++ b/src/layer/tile/GridLayer.js
@@ -310,9 +310,6 @@ export var GridLayer = Layer.extend({
 	_updateOpacity: function () {
 		if (!this._map) { return; }
 
-		// IE doesn't inherit filter opacity properly, so we're forced to set it on tiles
-		if (Browser.ielt9) { return; }
-
 		DomUtil.setOpacity(this._container, this.options.opacity);
 
 		var now = +new Date(),
@@ -796,11 +793,6 @@ export var GridLayer = Layer.extend({
 
 		tile.onselectstart = Util.falseFn;
 		tile.onmousemove = Util.falseFn;
-
-		// update opacity on tiles in IE7-8 because of filter inheritance problems
-		if (Browser.ielt9 && this.options.opacity < 1) {
-			DomUtil.setOpacity(tile, this.options.opacity);
-		}
 	},
 
 	_addTile: function (coords, container) {
@@ -879,7 +871,7 @@ export var GridLayer = Layer.extend({
 			// Fired when the grid layer loaded all visible tiles.
 			this.fire('load');
 
-			if (Browser.ielt9 || !this._map._fadeAnimated) {
+			if (!this._map._fadeAnimated) {
 				Util.requestAnimFrame(this._pruneTiles, this);
 			} else {
 				// Wait a bit more than 0.2 secs (the duration of the tile fade-in)
diff --git a/src/layer/tile/TileLayer.js b/src/layer/tile/TileLayer.js
index 708d34b0..e2e977d1 100644
--- a/src/layer/tile/TileLayer.js
+++ b/src/layer/tile/TileLayer.js
@@ -197,12 +197,7 @@ export var TileLayer = GridLayer.extend({
 	},
 
 	_tileOnLoad: function (done, tile) {
-		// For https://github.com/Leaflet/Leaflet/issues/3332
-		if (Browser.ielt9) {
-			setTimeout(Util.bind(done, this, null, tile), 0);
-		} else {
-			done(null, tile);
-		}
+		done(null, tile);
 	},
 
 	_tileOnError: function (done, tile, e) {
diff --git a/src/layer/vector/Circle.js b/src/layer/vector/Circle.js
index 400273a1..3e4ea37d 100644
--- a/src/layer/vector/Circle.js
+++ b/src/layer/vector/Circle.js
@@ -3,7 +3,7 @@ import {Path} from './Path';
 import * as Util from '../../core/Util';
 import {toLatLng} from '../../geo/LatLng';
 import {LatLngBounds} from '../../geo/LatLngBounds';
-import {Earth} from '../../geo/crs/CRS.Earth';
+//import {Earth} from '../../geo/crs/CRS.Earth';
 
 
 /*
@@ -72,7 +72,7 @@ export var Circle = CircleMarker.extend({
 		    map = this._map,
 		    crs = map.options.crs;
 
-		if (crs.distance === Earth.distance) {
+		/*if (crs.distance === Earth.distance) {
 			var d = Math.PI / 180,
 			    latR = (this._mRadius / Earth.R) / d,
 			    top = map.project([lat + latR, lng]),
@@ -90,7 +90,7 @@ export var Circle = CircleMarker.extend({
 			this._radius = isNaN(lngR) ? 0 : p.x - map.project([lat2, lng - lngR]).x;
 			this._radiusY = p.y - top.y;
 
-		} else {
+		} else */{
 			var latlng2 = crs.unproject(crs.project(this._latlng).subtract([this._mRadius, 0]));
 
 			this._point = map.latLngToLayerPoint(this._latlng);
diff --git a/src/layer/vector/SVG.js b/src/layer/vector/SVG.js
index 35149922..14930d93 100644
--- a/src/layer/vector/SVG.js
+++ b/src/layer/vector/SVG.js
@@ -5,9 +5,8 @@ import Browser from '../../core/Browser';
 import {stamp} from '../../core/Util';
 import {svgCreate, pointsToPath} from './SVG.Util';
 export {pointsToPath};
-import {vmlMixin, vmlCreate} from './SVG.VML';
 
-export var create = Browser.vml ? vmlCreate : svgCreate;
+export var create = svgCreate;
 
 /*
  * @class SVG
@@ -195,13 +194,9 @@ export var SVG = Renderer.extend({
 	}
 });
 
-if (Browser.vml) {
-	SVG.include(vmlMixin);
-}
-
 // @namespace SVG
 // @factory L.svg(options?: Renderer options)
 // Creates a SVG renderer with the given options.
 export function svg(options) {
-	return Browser.svg || Browser.vml ? new SVG(options) : null;
+	return Browser.svg ? new SVG(options) : null;
 }
diff --git a/src/map/Map.js b/src/map/Map.js
index 3cf164d5..b392b517 100644
--- a/src/map/Map.js
+++ b/src/map/Map.js
@@ -1,6 +1,6 @@
 import * as Util from '../core/Util';
 import {Evented} from '../core/Events';
-import {EPSG3857} from '../geo/crs/CRS.EPSG3857';
+import {Simple} from '../geo/crs/CRS.Simple';
 import {Point, toPoint} from '../geometry/Point';
 import {Bounds, toBounds} from '../geometry/Bounds';
 import {LatLng, toLatLng} from '../geo/LatLng';
@@ -33,10 +33,10 @@ export var Map = Evented.extend({
 
 	options: {
 		// @section Map State Options
-		// @option crs: CRS = L.CRS.EPSG3857
+		// @option crs: CRS = L.CRS.Simple
 		// The [Coordinate Reference System](#crs) to use. Don't change this if you're not
 		// sure what it means.
-		crs: EPSG3857,
+		crs: Simple,
 
 		// @option center: LatLng = undefined
 		// Initial geographic center of the map
@@ -1104,7 +1104,6 @@ export var Map = Evented.extend({
 		DomUtil.addClass(container, 'leaflet-container' +
 			(Browser.touch ? ' leaflet-touch' : '') +
 			(Browser.retina ? ' leaflet-retina' : '') +
-			(Browser.ielt9 ? ' leaflet-oldie' : '') +
 			(Browser.safari ? ' leaflet-safari' : '') +
 			(this._fadeAnimated ? ' leaflet-fade-anim' : ''));
 
